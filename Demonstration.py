#This example is meant to illustrate situations where k-means will produce unintuitive and possibly unexpected clusters.
#This is generated by reading and internalizing the documented example and then recoding this myself

import numpy as np
import matplotlib.pyplot as plt

from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs

plt.figure(figsize=(10,8))
#generate samples
n_samples=1500
random_state=170
X,y=make_blobs(n_samples=n_samples,random_state=random_state)


#1. Incorrect Number of Blobs
y_pred=KMeans(n_clusters=2,random_state=random_state).fit_predict(X)
plt.subplot(221)
plt.scatter(X[:,0],X[:,1],c=y_pred)
plt.title('Incorrect Number of Blobs')

#2. Anisotropicly Distributed Blobs
transform=[[0.613184582341,-0.62131857213],[-0.48249131254,0.8147171823192]]
X_aniso=np.dot(X,transform)
y_pred=KMeans(n_clusters=3,random_state=random_state).fit_predict(X_aniso)
plt.subplot(222)
plt.scatter(X_aniso[:,0],X_aniso[:,1],c=y_pred)
plt.title('Anisotropicly Distributed Blobs')

#3. Unequal Variance
X_var,y_var=make_blobs(n_samples=n_samples,random_state=random_state,cluster_std=[1,2.5,0.5])
y_pred=KMeans(n_clusters=3,random_state=random_state).fit_predict(X_var)
plt.subplot(223)
plt.scatter(X_var[:,0],X_var[:,1],c=y_pred)
plt.title('Unequal Variance')

#4. Unevenly Sized Blobs
X_uneven=np.vstack((X[y==0][:500],X[y==1][:100],X[y==2][:10]))
y_pred=KMeans(n_clusters=3,random_state=random_state).fit_predict(X_uneven)
plt.subplot(224)
plt.scatter(X_uneven[:,0],X_uneven[:,1],c=y_pred)
plt.title('Unevenly Sized Blobs')

plt.show()
